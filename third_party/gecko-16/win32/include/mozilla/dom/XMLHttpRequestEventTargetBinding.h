/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#ifndef mozilla_dom_XMLHttpRequestEventTargetBinding_h__
#define mozilla_dom_XMLHttpRequestEventTargetBinding_h__

#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/DOMJSClass.h"

class XPCWrappedNativeScope;
class nsXHREventTarget;

namespace mozilla {
namespace dom {
namespace workers {

class XMLHttpRequestEventTarget;

} // namespace workers
} // namespace dom
} // namespace mozilla



namespace mozilla {
namespace dom {

template <>
struct PrototypeTraits<prototypes::id::XMLHttpRequestEventTarget>
{
  enum
  {
    Depth = 1
  };
  typedef nsXHREventTarget NativeType;
};

template <>
struct PrototypeTraits<prototypes::id::XMLHttpRequestEventTarget_workers>
{
  enum
  {
    Depth = 1
  };
  typedef mozilla::dom::workers::XMLHttpRequestEventTarget NativeType;
};

} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {

namespace XMLHttpRequestEventTargetBinding {
  extern const NativePropertyHooks NativeHooks;

  JSObject* CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject* aReceiver);

  inline JSObject* GetProtoObject(JSContext* aCx, JSObject* aGlobal, JSObject* aReceiver)
  {

    /* Get the interface prototype object for this class.  This will create the
       object as needed. */

    /* aGlobal and aReceiver are usually the same, but they can be different
       too. For example a sandbox often has an xray wrapper for a window as the
       prototype of the sandbox's global. In that case aReceiver is the xray
       wrapper and aGlobal is the sandbox's global.
     */

    /* Make sure our global is sane.  Hopefully we can remove this sometime */
    if (!(js::GetObjectClass(aGlobal)->flags & JSCLASS_DOM_GLOBAL)) {
      return NULL;
    }
    /* Check to see whether the interface objects are already installed */
    JSObject** protoOrIfaceArray = GetProtoOrIfaceArray(aGlobal);
    JSObject* cachedObject = protoOrIfaceArray[prototypes::id::XMLHttpRequestEventTarget];
    if (!cachedObject) {
      protoOrIfaceArray[prototypes::id::XMLHttpRequestEventTarget] = cachedObject = CreateInterfaceObjects(aCx, aGlobal, aReceiver);
    }

    /* cachedObject might _still_ be null, but that's OK */
    return cachedObject;
  }

  bool ResolveProperty(JSContext* cx, JSObject* wrapper, jsid id, bool set, JSPropertyDescriptor* desc);

  bool EnumerateProperties(JS::AutoIdVector& props);

} // namespace XMLHttpRequestEventTargetBinding



namespace XMLHttpRequestEventTargetBinding_workers {

  JSObject* CreateInterfaceObjects(JSContext* aCx, JSObject* aGlobal, JSObject* aReceiver);

  inline JSObject* GetProtoObject(JSContext* aCx, JSObject* aGlobal, JSObject* aReceiver)
  {

    /* Get the interface prototype object for this class.  This will create the
       object as needed. */

    /* aGlobal and aReceiver are usually the same, but they can be different
       too. For example a sandbox often has an xray wrapper for a window as the
       prototype of the sandbox's global. In that case aReceiver is the xray
       wrapper and aGlobal is the sandbox's global.
     */

    /* Make sure our global is sane.  Hopefully we can remove this sometime */
    if (!(js::GetObjectClass(aGlobal)->flags & JSCLASS_DOM_GLOBAL)) {
      return NULL;
    }
    /* Check to see whether the interface objects are already installed */
    JSObject** protoOrIfaceArray = GetProtoOrIfaceArray(aGlobal);
    JSObject* cachedObject = protoOrIfaceArray[prototypes::id::XMLHttpRequestEventTarget_workers];
    if (!cachedObject) {
      protoOrIfaceArray[prototypes::id::XMLHttpRequestEventTarget_workers] = cachedObject = CreateInterfaceObjects(aCx, aGlobal, aReceiver);
    }

    /* cachedObject might _still_ be null, but that's OK */
    return cachedObject;
  }

} // namespace XMLHttpRequestEventTargetBinding_workers



} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_XMLHttpRequestEventTargetBinding_h__